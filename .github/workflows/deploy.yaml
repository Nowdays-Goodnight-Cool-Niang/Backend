on:
  push:
    branches:
      - chore/connection

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  GAR_LOCATION: asia-northeast3 # Artifact Registry, 인스턴스 리전
  REPOSITORY: shareme-docker
  IMAGE_NAME: shareme-backend
  INSTANCE_GROUP_NAME: shareme-instance-group
  MACHINE_TYPE: e2-medium
  NETWORK_TAGS: shareme-backend,http-server,https-server,lb-health-check
  INSTANCE_TEMPLATE_NAME: shareme-instance-template-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # OIDC 인증을 위해 필수

    steps:
      - name: repository 로드
        uses: actions/checkout@v4

      - name: 카카오 설정 로드
        run: echo "${{ secrets.KAKAO_PROPERTIES }}" > ./src/main/resources/application-kakao.properties

      - name: db 설정 로드
        run: echo "${{ secrets.PROD_PROPERTIES }}" > ./src/main/resources/application-prod.properties

      - name: Set up JDK 17 (Azul Zulu)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 테스트
        run: ./gradlew clean test -Pprofile=prod

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Install gcloud beta components
        run: gcloud components install beta -q

      - name: Configure Docker to use Google Cloud CLI
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker Image
        run: docker build -f Dockerfile -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker Image
        run: docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Tag and Push 'latest' Image
        run: |
          docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Create and Deploy New Instance Template
        run: |
          set -eo pipefail

          echo "INFO: Getting current instance template..."
          CURRENT_TEMPLATE_URL=$(gcloud compute instance-groups managed describe ${{ env.INSTANCE_GROUP_NAME }} \
            --region=${{ env.GAR_LOCATION }} \
            --format='get(version.instanceTemplate)')

          if [[ -z "$CURRENT_TEMPLATE_URL" ]]; then
            echo "::error::Failed to get current instance template from instance group '${{ env.INSTANCE_GROUP_NAME }}'. Please check if the group exists, has a template, and the service account has correct permissions."
            exit 1
          fi

          CURRENT_TEMPLATE_NAME=$(basename $CURRENT_TEMPLATE_URL)
          echo "INFO: Source template is: $CURRENT_TEMPLATE_NAME"

          echo "INFO: Creating new template from source..."
          gcloud compute instance-templates describe $CURRENT_TEMPLATE_NAME \
            --project=${{ env.PROJECT_ID }} --format=yaml > template.yaml

          echo "INFO: Replacing container image in template config..."
          sed -i "s|image: .*|image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" template.yaml

          echo "INFO: Creating new instance template: ${{ env.INSTANCE_TEMPLATE_NAME }}"
          gcloud beta compute instance-templates create ${{ env.INSTANCE_TEMPLATE_NAME }} \
            --source-from-file=template.yaml \
            --project=${{ env.PROJECT_ID }}

          echo "INFO: Starting rolling update for instance group '${{ env.INSTANCE_GROUP_NAME }}'..."
          gcloud compute instance-groups managed rolling-action start-update ${{ env.INSTANCE_TEMPLATE_NAME }} \
            --version=template=${{ env.INSTANCE_TEMPLATE_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.GAR_LOCATION }} \
            --max-unavailable=3

      - name: Discord Notification (Success)
        if: success()
        uses: rjstone/discord-webhook-notify@v2
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: 'GCP Deploy Bot'
          avatarUrl: 'https://avatars.githubusercontent.com/u/9919?s=200&v=4'
          severity: info
          title: '✅ Spring 애플리케이션 배포 성공!'
          description: '서버 롤링 업데이트가 시작되었습니다.'
          details: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

      - name: Discord Notification (Failure)
        if: failure()
        uses: rjstone/discord-webhook-notify@v2
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: 'GCP Deploy Bot'
          avatarUrl: 'https://avatars.githubusercontent.com/u/9919?s=200&v=4'
          severity: error
          title: '❌ Spring 애플리케이션 배포 실패!'
          description: '배포 과정 중 오류가 발생했습니다.'
          details: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
