on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  GAR_LOCATION: asia-northeast3 # Artifact Registry 리전
  REPOSITORY: shareme-docker
  IMAGE_NAME: shareme-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # OIDC 인증을 위해 필수

    steps:
      - name: repository 로드
        uses: actions/checkout@v4

      - name: 카카오 설정 로드
        run: echo "${{ secrets.KAKAO_PROPERTIES }}" > ./src/main/resources/application-kakao.properties

      - name: db 설정 로드
        run: echo "${{ secrets.PROD_PROPERTIES }}" > ./src/main/resources/application-prod.properties

      - name: Set up JDK 17 (Azul Zulu)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 테스트
        run: ./gradlew clean test -Pprofile=prod

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use Google Cloud CLI
        run: gcloud auth configure-docker ${GAR_LOCATION}-docker.pkg.dev

      - name: Build and Push Docker Image to Artifact Registry
        run: |
          docker build -f Dockerfile -t ${GAR_LOCATION}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${GAR_LOCATION}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          docker tag ${GAR_LOCATION}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${GAR_LOCATION}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${GAR_LOCATION}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Discord Notification (Success)
        if: success() # 이전 단계가 모두 성공했을 때만 실행
        uses: rjstone/discord-webhook-notify@v2
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }} # 전체 웹훅 URL 사용
          username: 'GCP Deploy Bot'
          avatarUrl: 'https://avatars.githubusercontent.com/u/9919?s=200&v=4'
          severity: info
          title: '✅ Spring 도커 이미지 배포 성공!'
          details: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

      - name: Discord Notification (Failure)
        if: failure() # 이전 단계 중 하나라도 실패했을 때 실행
        uses: rjstone/discord-webhook-notify@v2
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }} # 전체 웹훅 URL 사용
          username: 'GCP Deploy Bot'
          avatarUrl: 'https://avatars.githubusercontent.com/u/9919?s=200&v=4'
          severity: error
          title: '❌ Spring 도커 이미지 배포 실패!'
          details: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
